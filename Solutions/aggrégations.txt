#1
[
  {
    $sort:
      /**
       * Provide any number of field/order pairs.
       */
      {
        titre: 1,
      },
  },
]

#2
[
  {
    $addFields:
      /**
       * newField: The new field name.
       * expression: The new field expression.
       */
      {
        note: {
          $add: [
            {
              $floor: {
                $multiply: [
                  {
                    $rand: {},
                  },
                  5,
                ],
              },
            },
            1,
          ],
        },
      },
  },
  {
    $sort:
      /**
       * Provide any number of field/order pairs.
       */
      {
        note: -1,
        genre: 1,
        titre: 1,
      },
  },
]

#3
[
  {
    $group:
      /**
       * _id: The id of the group.
       * fieldN: The first field name.
       */
      {
        _id: "$genre",
        nbGenre: {
          $count: {},
        },
      },
  },
]

#3bis
[
  {
    $unwind: "$acteurs",
  },
  {
    $group:
      /**
       * _id: The id of the group.
       * fieldN: The first field name.
       */
      {
        _id: "$acteurs",
        nombreFilms: {
          $count: {},
        },
      },
  },
]

#4
[
  {
    $unwind:
      /**
       * path: Path to the array field.
       * includeArrayIndex: Optional name for index.
       * preserveNullAndEmptyArrays: Optional
       *   toggle to unwind null and empty values.
       */
      {
        path: "$realisateurs",
      },
  },
  {
    $group:
      /**
       * _id: The id of the group.
       * fieldN: The first field name.
       */
      {
        _id: "$realisateurs",
        nbFilms: {
          $count: {},
        },
      },
  },
  {
    $sort:
      /**
       * Provide any number of field/order pairs.
       */
      {
        nbFilms: -1,
      },
  },
  {
    $limit:
      /**
       * Provide the number of documents to limit.
       */
      5,
  },
]

#5
[
  {
    $match:
      /**
       * query: The query in MQL.
       */
      {
        pays: "Belgique",
      },
  },
  {
    $group:
      /**
       * _id: The id of the group.
       * fieldN: The first field name.
       */
      {
        _id: "$genre",
        nbfilm: {
          $count: {},
        },
        totDuree: {
          $sum: "$duree",
        },
      },
  },
  {
    $out:
      /**
       * Provide the name of the output collection.
       */
      "dureeFilmsBelges",
  },
]

#6
[
  {
    $group:
      /**
       * _id: The id of the group.
       * fieldN: The first field name.
       */
      {
        _id: {
          genre: "$genre",
          pays: "$pays",
        },
        min: {
          $min: "$annee",
        },
        max: {
          $max: "$annee",
        },
        avg: {
          $avg: "$annee",
        },
        avgDuree: {
          $avg: "$duree",
        },
      },
  },
  {
    $match:
      /**
       * query: The query in MQL.
       */
      {
        avgDuree: {
          $lte: 100,
        },
      },
  },
  {
    $sort:
      /**
       * Provide any number of field/order pairs.
       */
      {
        "_id.genre": 1,
        "_id.pays": 1,
      },
  },
  {
    $addFields:
      /**
       * newField: The new field name.
       * expression: The new field expression.
       */
      {
        label: {
          $concat: [
            "$_id.genre",
            " ",
            "$_id.pays",
          ],
        },
      },
  },
]

#7
[
  {
    $addFields:
      /**
       * newField: The new field name.
       * expression: The new field expression.
       */
      {
        note: {
          $floor: {
            $multiply: [
              6,
              {
                $rand: {},
              },
            ],
          },
        },
      },
  },
  {
    $project:
      /**
       * specifications: The fields to
       *   include or exclude.
       */
      {
        titre: 1,
        annee: 1,
        note: 1,
      },
  },
  {
    $sort:
      /**
       * Provide any number of field/order pairs.
       */
      {
        note: -1,
        titre: 1,
      },
  },
]

#8
[
  {
    $match:
      /**
       * query: The query in MQL.
       */
      {
        genre: "Horreur",
      },
  },
  {
    $sort:
      /**
       * Provide any number of field/order pairs.
       */
      {
        titre: 1,
      },
  },
  {
    $skip:
      /**
       * Provide the number of documents to skip.
       */
      20,
  },
  {
    $limit:
      /**
       * Provide the number of documents to limit.
       */
      10,
  },
]

#9
[
  {
    $match:
      /**
       * query: The query in MQL.
       */
      {
        $or: [
          {
            genre: "Horreur",
          },
          {
            genre: "Science-Fiction",
          },
        ],
      },
  },
  {
    $unwind:
      /**
       * path: Path to the array field.
       * includeArrayIndex: Optional name for index.
       * preserveNullAndEmptyArrays: Optional
       *   toggle to unwind null and empty values.
       */
      {
        path: "$acteurs",
      },
  },
  {
    $group:
      /**
       * _id: The id of the group.
       * fieldN: The first field name.
       */
      {
        _id: "$acteurs",
      },
  },
  {
    $sort:
      /**
       * Provide any number of field/order pairs.
       */
      {
        _id: 1,
      },
  },
  {
    $addFields:
      /**
       * newField: The new field name.
       * expression: The new field expression.
       */
      {
        acteur: "$_id",
      },
  },
  {
    $project:
      /**
       * specifications: The fields to
       *   include or exclude.
       */
      {
        _id: 0,
        acteur: 1,
      },
  },
]

#11
[
    {
        $unwind: "$symbols"
    },
    {
        $group: {
            _id: "$symbols.symbol"
        }
    },
    {
        $sort:{
            _id: 1
        }
    }
]

#12
[
  {
    $unwind:
      /**
       * path: Path to the array field.
       * includeArrayIndex: Optional name for index.
       * preserveNullAndEmptyArrays: Optional
       *   toggle to unwind null and empty values.
       */
      {
        path: "$symbols",
      },
  },
  {
    $unwind:
      /**
       * path: Path to the array field.
       * includeArrayIndex: Optional name for index.
       * preserveNullAndEmptyArrays: Optional
       *   toggle to unwind null and empty values.
       */
      {
        path: "$symbols.baseAsset",
      },
  },
  {
    $sort:
      /**
       * Provide any number of field/order pairs.
       */
      {
        symbols: -1,
      },
  },
  {
    $group:
      /**
       * _id: The id of the group.
       * fieldN: The first field name.
       */
      {
        _id: "$symbols.baseAsset",
      },
  },
  {
    $sort:
      /**
       * Provide any number of field/order pairs.
       */
      {
        _id: 1,
      },
  },
]

#13
[
  {
    $unwind:
      /**
       * path: Path to the array field.
       * includeArrayIndex: Optional name for index.
       * preserveNullAndEmptyArrays: Optional
       *   toggle to unwind null and empty values.
       */
      {
        path: "$symbols",
      },
  },
  {
    $match:
      /**
       * _id: The id of the group.
       * fieldN: The first field name.
       */
      {
        "symbols.status": "TRADING",
        "symbols.orderTypes": "STOP_LOSS_LIMIT",
        "symbols.permissions": "MARGIN",
      },
  },
  {
    $sort:
      /**
       * Provide any number of field/order pairs.
       */
      {
        "symbols.symbol": 1,
      },
  },
]

#14

DONNEES:
Auteurs:
[{
  "_id": 1,
  "nom": "Auteur 1"
},
{
  "_id": 2,
  "nom": "Auteur 2"
}]

Livres:
[{
  "_id": 1,
  "titre": "Livre 1",
  "auteur_id": 1
},
{
  "_id": 2,
  "titre": "Livre 2",
  "auteur_id": 1
},
{
  "_id": 3,
  "titre": "Livre 3",
  "auteur_id": 2
}]

AGGREGATION:
[
  {
    $lookup:
      /**
       * from: The target collection.
       * localField: The local join field.
       * foreignField: The target join field.
       * as: The name for the results.
       * pipeline: Optional pipeline to run on the foreign collection.
       * let: Optional variables to use in the pipeline field stages.
       */
      {
        from: "auteurs",
        localField: "auteur_id",
        foreignField: "_id",
        as: "auteurJoin",
      },
  },
  {
    $unwind:
      /**
       * path: Path to the array field.
       * includeArrayIndex: Optional name for index.
       * preserveNullAndEmptyArrays: Optional
       *   toggle to unwind null and empty values.
       */
      {
        path: "$auteurJoin",
      },
  },
  {
    $project:
      /**
       * specifications: The fields to
       *   include or exclude.
       */
      {
        titre: 1,
        "auteurJoin.nom": 1,
      },
  },
]